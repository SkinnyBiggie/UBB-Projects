     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 6162630F1E2D                s1 db "abc", 15, 30, 45
    15                                      len1 equ $-s1
    16 00000006 14286465663C                s2 db 20, 40, "def", 60; we declare the 2 strings
    17                                      len2 equ ($-s2)-s1
    18 0000000C <res 00000006>              result resb 6
    19                                      
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 B906000000                      mov ECX, len2
    25 00000005 B800000000                      mov EAX, 0
    26 0000000A BB00000000                      mov EBX, 0
    27 0000000F BA00000000                      mov EDX, 0
    28 00000014 E31A                            jecxz second_done
    29                                          
    30                                          second_string:; loop to get the decimal numbers from the seconds string
    31 00000016 83F900                              cmp ecx, 0
    32 00000019 7415                                je second_done
    33 0000001B 8A93[06000000]                      mov dl, [s2+ebx]
    34 00000021 80FA00                              cmp dl, 0d
    35 00000024 7D01                                jge found_decimal
    36 00000026 43                                  inc ebx
    37                                          
    38                                          found_decimal:
    39 00000027 8893[0C000000]                      mov byte[result+ebx], dl
    40 0000002D 43                                  inc ebx
    41 0000002E EBE6                                jmp second_string
    42                                              
    43                                          second_done:
    44                                          ; exit(0)
    45 00000030 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000032 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
