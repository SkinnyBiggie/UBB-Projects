     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; 18. Read a string of unsigned numbers in base 10 from keyboard. Determine the minimum value of the string and write it in the file min.txt (it will be created) in 16 base.
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global _minValue      
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  
    10                                  ; our data is declared here (the variables needed by our program)
    11                                  segment data public data use32
    12                                      ; ...
    13 00000000 00000000                    min dd 0
    14 00000004 00000000                    aux dd 0
    15                                      
    16                                  ; our code starts here
    17                                  segment code public code use32
    18                                      _minValue:
    19                                          ; ...
    20 00000000 55                              push ebp
    21 00000001 89E5                            mov ebp, esp
    22                                          
    23 00000003 8B4504                          mov eax, [ebp+4]
    24 00000006 BB00000000                      mov ebx, 0
    25                                          compare:
    26 0000000B 8B1418                              mov edx, [eax+ebx]
    27 0000000E 83FAFF                              cmp edx, -1
    28 00000011 7438                                je final
    29 00000013 3B15[00000000]                      cmp EDX, [min]
    30 00000019 7C0A                                jl smaller
    31 0000001B 7F1A                                jg greater
    32 0000001D 8B15[00000000]                      mov edx, [min]
    33 00000023 EBE6                                jmp compare
    34                                              smaller:
    35 00000025 8915[04000000]                          mov dword[aux], edx
    36 0000002B 8915[00000000]                          mov dword[min], edx
    37 00000031 8B15[04000000]                          mov edx, [aux]
    38                                              greater:
    39 00000037 8915[04000000]                          mov dword[aux], edx
    40 0000003D 8915[00000000]                          mov dword[min], edx
    41 00000043 8B15[04000000]                          mov edx, [aux]
    42 00000049 E2C0                            loop compare
    43                                          
    44                                          final:
    45 0000004B A1[00000000]                        mov eax, [min]
    46 00000050 89EC                                mov esp, ebp
    47 00000052 5D                                  pop ebp
    48                                              
    49 00000053 C3                                  ret
