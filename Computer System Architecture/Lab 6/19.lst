     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  
     7                                  ; Exercise 19
     8                                  ; Two byte strings A and B are given. Obtain the string R that contains only the even negative elements of the two strings. Example:
     9                                      ;A: 2, 1, 3, -3, -4, 2, -6
    10                                      ;B: 4, 5, -5, 7, -6, -2, 1
    11                                      ;R: -4, -6, -6, -2
    12                                      
    13                                  segment data use32 class=data
    14 00000000 020103FDFC02FA              A db 2, 1, 3, -3, -4, 2, -6
    15                                      lenA equ $-A
    16                                      
    17 00000007 0405FB07FAFE01              B db 4, 5, -5, 7, -6, -2, 1
    18                                      lenB equ $-B
    19                                      
    20 0000000E <res 0000000E>              R resb lenA+lenB
    21                                  
    22                                  segment code use32 class=code
    23                                  start:
    24 00000000 BF00000000                  mov edi, 0 ; initialize string address index for R
    25                                      
    26 00000005 B907000000                  mov ecx, lenA ; loop lenA times
    27 0000000A E31D                        jecxz second_string ; jump to the second string if ecx is 0
    28                                      
    29 0000000C BE00000000                  mov esi, 0 ; initialize string address index for A
    30                                      first_loop:
    31 00000011 8A86[00000000]                  mov al, [A+esi] ; move the current value from the first string to al
    32 00000017 A801                            test al, 1 ; check if al is even or odd (lowest bit set)
    33 00000019 750B                            jnz end_first_loop ; if al is odd jump to the end_first_loop label (ZF=0)
    34                                          
    35 0000001B 84C0                            test al, al ; check if al is positive or negative
    36 0000001D 7907                            jns end_first_loop ; if al is positive jump to the end_first_loop label (SF=0)
    37                                  
    38 0000001F 8887[0E000000]                  mov [R+edi], al ; if all the checks passed save the current value in R
    39 00000025 47                              inc edi ; increment edi to the next index
    40                                          
    41                                          end_first_loop:
    42 00000026 46                              inc esi ; increment esi to the next index
    43 00000027 E2E8                        loop first_loop
    44                                      
    45                                      second_string: ; label used in case the first string has a length of 0
    46 00000029 B907000000                  mov ecx, lenB ; loop lenB times
    47 0000002E E31D                        jecxz end_program ; jump to end if ecx is 0
    48                                      
    49 00000030 BE00000000                  mov esi, 0 ; initialize string address index for B
    50                                      second_loop:
    51 00000035 8A86[07000000]                  mov al, [B+esi] ; move the current value from the second string to al
    52 0000003B A801                            test al, 1 ; check if al is even or odd (lowest bit set)
    53 0000003D 750B                            jnz end_second_loop ; if al is odd jump to the end_second_loop label (ZF=0)
    54                                          
    55 0000003F 84C0                            test al, al ; check if al is positive or negative
    56 00000041 7907                            jns end_second_loop ; if al is positive jump to the end_first_loop label (SF=0)
    57                                  
    58 00000043 8887[0E000000]                  mov [R+edi], al ; if all the checks passed save the current value in R
    59 00000049 47                              inc edi ; increment edi to the next index
    60                                          
    61                                          end_second_loop:
    62 0000004A 46                              inc esi ; increment esi to the next index
    63 0000004B E2E8                        loop second_loop
    64                                      
    65                                      end_program: ; label used in case the second string has a length of 0
    66                                      
    67                                      ; exit(0)
    68 0000004D 6A00                        push    dword 0      ; push the parameter for exit onto the stack
    69 0000004F FF15[00000000]              call    [exit]       ; call exit to terminate the program
