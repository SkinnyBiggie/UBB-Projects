     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ;3. An array of doublewords, where each doubleword contains 2 values on a word (unpacked, so each nibble is preceded by a 0) is given. Write an asm program to create a new array of bytes which contain those values (
     4                                  
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 0A09020704030C0B08-         array dd 0702090Ah, 0B0C0304h, 05060108h
    17 00000009 010605             
    18                                      len equ ($-array)/2
    19 0000000C BA00000000                  mov EDX, 0h
    20 00000011 00000000                    result dd 0
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 BE[00000000]                    mov esi, array
    27 00000005 FC                              cld
    28 00000006 B906000000                      mov ecx, len
    29                                          
    30                                          Loop1:
    31 0000000B 66AD                                lodsw; we move into AX the least significant word of the doubleword
    32                                              mov dl, 
    32          ******************       error: invalid combination of opcode and operands
    33 0000000D E2FC                            loop Loop1
    34                                          ; exit(0)
    35 0000000F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 00000011 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
