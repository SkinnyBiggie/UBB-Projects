     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; 18. A string of doublewords is given. Order in increasing order the string of the high words (most significant) from these doublewords. The low words (least significant) remain unchange
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 7856AB12CDAB561244-         string dd 12AB5678h, 1256ABCDh, 12344344h
    16 00000009 433412             
    17                                      len equ ($-string)/4
    18 0000000C <res 00000006>              d resw 3
    19 00000012 <res 0000000C>              result resd 3
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 BE[00000000]                    mov esi, string; we store in esi the offset of our string
    25 00000005 B903000000                      mov ecx, len
    26 0000000A BB00000000                      mov ebx, 0
    27                                          loop1:
    28 0000000F 66AD                                lodsw
    29 00000011 66AD                                lodsw; we get to the most significant word of the doubleword
    30 00000013 668983[0C000000]                    mov word[d+ebx], AX
    31 0000001A 43                                  inc ebx
    32 0000001B 43                                  inc ebx
    33 0000001C E2F1                            loop loop1; we store the high words of each doubleword in variable d
    34                                          
    35                                          ;now we create the sort loop
    36 0000001E 66BA0100                        mov dx, 1
    37                                          loop2:
    38 00000022 6683FA00                            cmp dx, 0
    39 00000026 742C                                je end_loop
    40                                              
    41 00000028 BE[0C000000]                        mov esi, d
    42 0000002D 66BA0000                            mov dx, 0
    43 00000031 B902000000                          mov ecx, len-1
    44                                              
    45                                              repeat_for:
    46 00000036 668B06                                  mov ax, [esi]
    47 00000039 663B4602                                cmp ax, [esi+2]
    48 0000003D 7E0F                                    jle next
    49 0000003F 668B5E02                                    mov bx, [esi+2]
    50 00000043 66891E                                      mov [esi], bx
    51 00000046 66894602                                    mov [esi+2], ax
    52 0000004A 66BA0100                                    mov dx, 1
    53                                                  next:
    54 0000004E 46                                      inc esi
    55 0000004F 46                                      inc esi
    56 00000050 E2E4                                    loop repeat_for
    57 00000052 EBCE                                    jmp loop2
    58                                          end_loop:
    59                                          
    60                                          ;now we make a loop to concatenate the new doublewords
    61 00000054 B903000000                      mov ecx, len
    62                                          
    63 00000059 BB04000000                      mov ebx, 4h
    64 0000005E BA0A000000                      mov edx, 10
    65 00000063 FD                              std
    66                                          loop3:
    67 00000064 66AD                                lodsw
    68 00000066 668982[00000000]                    mov word[string+edx], AX
    69 0000006D 29DA                                sub edx, ebx
    70 0000006F E2F3                            loop loop3
    71                                          ; exit(0)
    72 00000071 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    73 00000073 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
