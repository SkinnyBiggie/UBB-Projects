     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; 3.(8-a*b*100+c)/d+x         a,b,d-byte; c-doubleword; x-qword
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16                                      
    17 00000000 02                          a db 2h
    18 00000001 03                          b db 3h
    19 00000002 45893245                    c dd 45328945h
    20 00000006 20                          d db 20h
    21 00000007 8877665544332211            x dq 1122334455667788h
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 B800000000                      mov EAX, 0
    28 00000005 BB00000000                      mov EBX, 0
    29 0000000A B900000000                      mov ECX, 0
    30 0000000F BA00000000                      mov EDX, 0
    31                                          
    32 00000014 A0[00000000]                    mov AL, [a]
    33 00000019 8A15[01000000]                  mov DL, [b]
    34 0000001F F6EA                            imul DL; AX = a*b
    35 00000021 66BA0001                        mov DX, 100h
    36 00000025 66F7EA                          imul DX; DX:AX = a*b*100
    37                                          
    38 00000028 6652                            push DX
    39 0000002A 6650                            push AX
    40 0000002C 5B                              pop EBX; EBX = a*b*100
    41                                          
    42 0000002D B908000000                      mov ECX, 8h
    43 00000032 29D9                            sub ECX, EBX; ECX = 8-a*b*100
    44                                          
    45 00000034 8B1D[02000000]                  mov EBX, [c]
    46 0000003A 01D9                            add ECX, EBX; ECX = 8-a*b*100+c
    47                                          
    48 0000003C A0[06000000]                    mov AL, [d]
    49 00000041 6698                            cbw ; AX = word d
    50 00000043 BB00000000                      mov EBX, 0
    51 00000048 6689C3                          mov BX, AX
    52 0000004B B800000000                      mov EAX, 0
    53 00000050 51                              push ECX;
    54 00000051 6658                            pop AX;
    55 00000053 665A                            pop DX
    56 00000055 66F7FB                          idiv BX; DX:AX = (8-a*b*100+c)/d
    57 00000058 98                              cwde
    58 00000059 99                              cdq
    59                                          
    60 0000005A 8B1D[07000000]                  mov EBX, dword[x+0]
    61 00000060 8B0D[0B000000]                  mov ECX, dword[x+4]
    62                                          
    63 00000066 01D8                            add EAX, EBX
    64 00000068 11CA                            adc EDX, ECX; EDX: EAX = (8-a*b*100+c)/d+x
    65                                          
    66                                          
    67                                          
    68                                          ; exit(0)
    69 0000006A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 0000006C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
