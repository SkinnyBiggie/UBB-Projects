     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; 18.(a+b*c+2/c)/(2+a)+e+x      a,b-byte; c-word; e-doubleword; x-qword
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                  
    19 00000000 02                          a db 2h
    20 00000001 03                          b db 3h
    21 00000002 3245                        c dw 4532h
    22 00000004 45893245                    e dd 45328945h
    23 00000008 8877665544332211            x dq 1122334455667788h
    24                                      
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 B800000000                      MOV EAX, 0
    30 00000005 BB00000000                      MOV EBX, 0
    31 0000000A B900000000                      MOV ECX, 0
    32 0000000F BA00000000                      MOV EDX, 0
    33                                          
    34 00000014 A0[01000000]                    mov AL, [b]
    35 00000019 6698                            cbw; AX = b
    36 0000001B 668B15[02000000]                mov DX, [c]
    37 00000022 66F7EA                          imul DX
    38 00000025 6652                            push DX
    39 00000027 6650                            push AX
    40 00000029 5B                              pop EBX; EBX = b*c
    41                                          
    42 0000002A B800000000                      mov EAX, 0
    43 0000002F B802000000                      mov EAX, 2h
    44 00000034 668B0D[02000000]                mov CX, [c]
    45 0000003B 66F7F9                          idiv CX; DX:AX = 2/c
    46                                          
    47 0000003E 89C1                            mov ECX, EAX
    48 00000040 A0[00000000]                    mov AL, [a]
    49 00000045 6698                            cbw
    50 00000047 98                              cwde; EAX = a
    51                                          
    52 00000048 01D8                            add EAX, EBX; EAX = a+b*c
    53 0000004A 01C8                            add EAX, ECX; EAX = a+b*c+2/c
    54                                          
    55 0000004C B302                            mov BL, 2
    56 0000004E 8A0D[00000000]                  mov CL, [a]
    57 00000054 00CB                            add BL, CL; BL = 2+a
    58                                          
    59 00000056 89C1                            mov ECX, EAX
    60 00000058 88D8                            mov AL, BL
    61 0000005A 6698                            cbw
    62 0000005C 6689C3                          mov BX, AX
    63 0000005F 89C8                            mov EAX, ECX
    64 00000061 BA00000000                      mov EDX, 0
    65 00000066 66F7FB                          idiv BX; DX:AX = (a+b*c+2/c)/(2+a)
    66 00000069 98                              cwde; EAX = (a+b*c+2/c)/(2+a)
    67 0000006A 8B1D[04000000]                  mov EBX, [e]
    68 00000070 01D8                            add EAX, EBX; EAX = (a+b*c+2/c)/(2+a)+e
    69 00000072 99                              cdq; EDX:EAX = (a+b*c+2/c)/(2+a)+e
    70                                          
    71 00000073 8B1D[08000000]                  mov EBX, dword[x+0]
    72 00000079 8B0D[0C000000]                  mov ECX, dword[x+4]
    73 0000007F 01D8                            add EAX, EBX
    74 00000081 11CA                            adc EDX, ECX; EDX:EAX = (a+b*c+2/c)/(2+a)+e+x
    75                                          
    76                                          ; exit(0)
    77 00000083 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 00000085 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
