     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ;3.(8-a*b*100+c)/d+x         a,b,d-byte; c-doubleword; x-qword
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 02                          a db 2h
    17 00000001 03                          b db 3h
    18 00000002 45893245                    c dd 45328945h
    19 00000006 20                          d db 20h
    20 00000007 8877665544332211            x dq 1122334455667788h
    21                                      
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 A0[00000000]                    mov AL, [a]
    28 00000005 8A15[01000000]                  mov DL, [b]
    29 0000000B F6E2                            mul DL; AX = a*b
    30                                          
    31 0000000D 66BA0001                        mov DX, 100h
    32 00000011 66F7E2                          mul DX; DX:AX = a*b*100
    33                                          
    34 00000014 6652                            push DX
    35 00000016 6650                            push AX
    36 00000018 5B                              pop EBX; EBX = a*b*100
    37                                          
    38 00000019 B908000000                      mov ECX, 8h
    39 0000001E 29D9                            sub ECX, EBX; ECX = 8-a*b*100
    40                                          
    41 00000020 8B1D[02000000]                  mov EBX, [c]
    42 00000026 01D9                            add ECX, EBX; ECX = 8-a*b*100+c
    43                                          
    44 00000028 A0[06000000]                    mov AL, [d]
    45 0000002D B400                            mov AH, 0; AX = word d
    46                                          
    47 0000002F BB00000000                      mov EBX, 0
    48 00000034 6689C3                          mov BX, AX
    49 00000037 B800000000                      mov EAX, 0
    50 0000003C BA00000000                      mov EDX, 0
    51 00000041 51                              push ECX;
    52 00000042 6658                            pop AX;
    53 00000044 665A                            pop DX
    54                                          
    55 00000046 66F7F3                          div BX; DX:AX = (8-a*b*100+c)/d
    56 00000049 6689C1                          mov CX, AX
    57 0000004C B800000000                      mov EAX, 0
    58 00000051 6689C8                          mov AX, CX
    59 00000054 BA00000000                      mov EDX, 0; EDX:EAX = (8-a*b*100+c)/d
    60                                          
    61 00000059 8B1D[07000000]                  mov EBX, dword[x+0]
    62 0000005F 8B0D[0B000000]                  mov ECX, dword[x+4]
    63                                          
    64 00000065 01D8                            add EAX, EBX
    65 00000067 11CA                            adc EDX, ECX; EDX: EAX = (8-a*b*100+c)/d+x
    66                                      
    67                                          ; exit(0)
    68 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
