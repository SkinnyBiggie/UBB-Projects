     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  
     7                                  ; 19.  Being given two strings of bytes, compute all positions where the second string appears as a substring in the first string. 
     8                                  
     9                                  segment data use32 class=data
    10 00000000 010203010204010301-         a db 1, 2, 3, 1, 2, 4, 1, 3, 1, 2, 5
    10 00000009 0205               
    11                                         ; 0  1  2  3  4  5  6  7  8  9  10
    12                                      lenA equ $-a
    13                                      
    14 0000000B 0102                        b db 1, 2
    15                                      lenB equ $-b
    16                                      
    17 0000000D <res 0000000B>              d resb lenA
    18                                      ; 0, 3, 8
    19                                  
    20                                  segment code use32 class=code
    21                                  start:
    22 00000000 B90B000000                  mov ecx, lenA ; load the number of elements of s into ecx
    23 00000005 E33E                        jecxz program_end ; jump to the end if ecx is 0
    24                                      
    25 00000007 BB[0D000000]                mov ebx, d ; load the offset of the d string into ebx
    26                                      
    27 0000000C BE[00000000]                mov esi, a ; load the offset of the a string into esi
    28 00000011 BF[0B000000]                mov edi, b ; load the offset of the b string into edi
    29 00000016 FC                          CLD ; clear the direction flag
    30                                      loop_string:
    31                                          count_appearance: ; count the number of values from the substring that appear in the main string from index esi onwards and stop when we reach a value from a that is not in b
    32 00000017 A6                                  cmpsb ; compare the current value from the a string to the current value of the b string
    33 00000018 9C                                  pushf ; push the flags to the stack
    34 00000019 4E                                  dec esi ; return esi to the previous value
    35 0000001A 4F                                  dec edi ; return edi to the previous value
    36 0000001B 9D                                  popf ; pop the flags from the stack
    37 0000001C 7503                                jne check_length ; if the values are NOT equal we stop the loop
    38                                              
    39 0000001E 47                                  inc edi ; if the values ARE equal we increment edi (index for b) to check the next value from the substring
    40 0000001F 74F6                            je count_appearance ; we keep looping until we reach a value from the main string that is not in the substring
    41                                          
    42                                          
    43                                          check_length: ; we check if the count from above is equal to the length of the substring
    44 00000021 89F8                            mov eax, edi ; move the current memory address of b into eax
    45 00000023 2D[0B000000]                    sub eax, b ; substract the starting memory address of b from eax
    46                                          
    47 00000028 83F802                          cmp eax, lenB ; compare the current index for b to the length of b
    48 0000002B 7515                            jne end_loop ; if they are NOT equal we jump to the next index of a
    49                                          
    50 0000002D 89F0                            mov eax, esi ; if they ARE equal we compute the starting position of the subtring appearance by substracting the length of b from esi (esi=ending position from the count_appearance loop)
    51 0000002F 40                              inc eax
    52 00000030 2D[00000000]                    sub eax, a ; substract the starting memory address of a from eax
    53 00000035 83E802                          sub eax, lenB ; substract the length of b from eax
    54                                          
    55 00000038 87DF                            xchg ebx, edi ; swap the contents of ebx and edi to prepare for storing result into d
    56 0000003A AA                              stosb ; store al into d
    57 0000003B 87DF                            xchg ebx, edi ; swap the contents of ebx and edi to prepare for the new loop iteration
    58                                          
    59 0000003D BF[0B000000]                    mov edi, b ; if they ARE equal we reset the current index of b
    60                                          
    61                                          end_loop:
    62 00000042 46                              inc esi ; increment esi to the next index
    63 00000043 E2D2                        loop loop_string
    64                                      
    65                                      program_end: ; program end label
    66                                      
    67                                      ; exit(0)
    68 00000045 6A00                        push    dword 0      ; push the parameter for exit onto the stack
    69 00000047 FF15[00000000]              call    [exit]       ; call exit to terminate the program
