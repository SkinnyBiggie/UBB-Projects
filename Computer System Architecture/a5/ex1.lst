     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; 3. Two byte strings S1 and S2 are given. Obtain the string D by concatenating the elements of S1 from the left hand side to the right hand side and the elements of S2 from the right hand side to the left hand side
     4                                  
     5                                  
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 31323334                    a db '1', '2', '3', '4'
    19                                      f equ $-a ; equal to the length of a
    20 00000004 353637                      b db '5', '6', '7'
    21                                      e equ $-b ; equal to the length of b
    22 00000007 00                          d times 1 db 0
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 B904000000                      mov ECX, f  ; we add the length of the first string in ECX as a counter
    29 00000005 BE00000000                      mov ESI, 0
    30 0000000A E30F                            jecxz End1
    31                                          Loop:
    32 0000000C 8A86[00000000]                      mov al, [a+esi]   
    33 00000012 8886[07000000]                      mov [d+esi], al ; we move each element in d
    34 00000018 46                                  inc esi
    35 00000019 E2F1                            loop Loop
    36                                          End1: ; Add the first string in the right order
    37                                          
    38 0000001B B903000000                      mov ECX, e ;  we add the length of the second string in ECX as a counter
    39 00000020 BE00000000                      mov ESI, 0
    40 00000025 E30F                            jecxz End2
    41                                          Loop2:
    42 00000027 8A86[04000000]                      mov al, [b+esi]
    43 0000002D 8881[0A000000]                      mov [d+f+ecx-1], al; we move each element from left to right in data
    44 00000033 46                                  inc esi
    45 00000034 E2F1                            loop Loop2
    46                                          End2:
    47                                      
    48                                          ; exit(0)
    49 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
