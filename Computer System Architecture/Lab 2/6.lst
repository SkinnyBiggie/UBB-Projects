     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  
     7                                  ; e-doubleword; x-qword
     8                                  ; (a+a+b*c*100+x)/(a+10)+e*a; a,b,c-byte
     9                                  ; 660/20+40=73
    10                                  
    11                                  segment data use32 class=data
    12 00000000 0A                          a db 10
    13 00000001 02                          b db 2
    14 00000002 03                          c db 3
    15 00000003 04000000                    e dd 4
    16 00000007 2800000000000000            x dq 40
    17                                  
    18                                  segment code use32 class=code
    19                                  start:
    20 00000000 A0[00000000]                mov al, [a]
    21 00000005 0205[00000000]              add al, [a] ;al = a+a
    22 0000000B 6698                        cbw ;ax = a+a
    23 0000000D 98                          cwde ;eax = a+a
    24 0000000E 50                          push eax
    25                                      
    26 0000000F A0[01000000]                mov al, [b]
    27 00000014 8A1D[02000000]              mov bl, [c]
    28 0000001A F6EB                        imul bl ;ax = b*c
    29 0000001C 66BB6400                    mov bx, 100
    30 00000020 66F7EB                      imul bx ;dx:ax = b*c*100
    31 00000023 6652                        push dx
    32 00000025 6650                        push ax
    33 00000027 58                          pop eax ;eax = b*c*100
    34 00000028 99                          cdq ;edx:eax = b*c*100
    35 00000029 89D1                        mov ecx, edx
    36 0000002B 89C3                        mov ebx, eax ;ecx:ebx = b*c*100
    37 0000002D 58                          pop eax ;eax = a+a
    38 0000002E 99                          cdq ;edx:eax = a+a
    39 0000002F 01C3                        add ebx, eax
    40 00000031 11D1                        adc ecx, edx ;ecx:ebx = a+a+b*c*100
    41 00000033 031D[07000000]              add ebx, dword [x]
    42 00000039 130D[0B000000]              adc ecx, dword [x+4] ;(a+a+b*c*100+x)
    43                                      
    44 0000003F 51                          push ecx
    45 00000040 53                          push ebx ;save (a+a+b*c*100+x)
    46                                      
    47 00000041 A0[00000000]                mov al, [a]
    48 00000046 040A                        add al, 10 ;al = a+10
    49 00000048 6698                        cbw ;ax = a+10
    50 0000004A 98                          cwde ;eax = a+10
    51 0000004B 89C3                        mov ebx, eax ;ebx = a+10
    52                                      
    53 0000004D 58                          pop eax
    54 0000004E 5A                          pop edx ;retrieve (a+a+b*c*100+x)
    55 0000004F F7FB                        idiv ebx ;eax = (a+a+b*c*100+x)/(a+10)
    56 00000051 50                          push eax ;save (a+a+b*c*100+x)/(a+10)
    57                                      
    58 00000052 A0[00000000]                mov al, [a]
    59 00000057 6698                        cbw
    60 00000059 98                          cwde
    61                                      
    62 0000005A 8B1D[03000000]              mov ebx, [e]
    63 00000060 F7EB                        imul ebx
    64                                      
    65 00000062 89C3                        mov ebx, eax
    66 00000064 89D1                        mov ecx, edx
    67                                      
    68 00000066 58                          pop eax
    69 00000067 98                          cwde
    70                                      
    71 00000068 01D8                        add eax, ebx
    72 0000006A 11CA                        adc edx, ecx
    73                                      
    74                                      
    75                                      ; exit(0)
    76 0000006C 6A00                        push dword 0
    77 0000006E FF15[00000000]              call [exit]
