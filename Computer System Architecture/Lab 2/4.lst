     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  
     7                                  ; a - byte, b - word, c - double word, d - qword - Signed representation
     8                                  ; (d+a)-(c-b)-(b-a)+(c+d)
     9                                  
    10                                  segment data use32 class=data
    11 00000000 01                          a db 1
    12 00000001 0200                        b dw 2
    13 00000003 06000000                    c dd 6
    14 00000007 0400000000000000            d dq 4
    15                                  
    16                                  segment code use32 class=code
    17                                  start:
    18 00000000 66A1[01000000]              mov ax, [b]
    19 00000006 98                          cwde ;eax = b
    20                                      
    21 00000007 8B1D[03000000]              mov ebx, [c]
    22 0000000D 29C3                        sub ebx, eax ;ebx = c-b
    23                                      
    24 0000000F A0[00000000]                mov al, [a]
    25 00000014 6698                        cbw ;ax = a
    26                                      
    27 00000016 668B0D[01000000]            mov cx, [b]
    28 0000001D 6629C1                      sub cx, ax ;cx = b-a
    29 00000020 6689C8                      mov ax, cx ;ax = b-a
    30 00000023 98                          cwde ;eax = b-a
    31                                      
    32 00000024 01C3                        add ebx, eax ;ebx = (c-b)-(b-a) (we use addition because we have a minus before these 2 operations)
    33 00000026 53                          push ebx ;save to stack
    34                                      
    35 00000027 A0[00000000]                mov al, [a]
    36 0000002C 6698                        cbw ;ax = a
    37 0000002E 98                          cwde ;eax = a
    38 0000002F 99                          cdq ;edx:eax = a
    39                                      
    40 00000030 0305[07000000]              add eax, dword [d]
    41 00000036 1315[0B000000]              adc edx, dword [d+4] ; edx:eax = d+a
    42                                      
    43 0000003C 89C3                        mov ebx, eax
    44 0000003E 89D1                        mov ecx, edx ;ecx:ebx = d+a
    45                                      
    46 00000040 58                          pop eax ;restore (c-b)-(b-a)
    47 00000041 99                          cdq ;edx:eax = (c-b)-(b-a)
    48                                      
    49 00000042 29C3                        sub ebx, eax
    50 00000044 19D1                        sbb ecx, edx ;ecx:ebx = (d+a)-(c-b)-(b-a)
    51                                      
    52 00000046 A1[03000000]                mov eax, [c]
    53 0000004B 99                          cdq ;edx:eax = c
    54                                      
    55 0000004C 0305[07000000]              add eax, dword [d]
    56 00000052 1315[0B000000]              adc edx, dword [d+4] ; edx:eax = c+d    
    57                                      
    58 00000058 01C3                        add ebx, eax
    59 0000005A 11D1                        adc ecx, edx ;ecx:ebx = (d+a)-(c-b)-(b-a)+(c+d)
    60                                      
    61                                      ; exit(0)
    62 0000005C 6A00                        push dword 0
    63 0000005E FF15[00000000]              call [exit]
