     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  
     7                                  ; a - byte, b - word, c - double word, d - qword - Unsigned representation
     8                                  ; (a-b)+(c-b-d)+d
     9                                  
    10                                  segment data use32 class=data
    11 00000000 08                          a db 8
    12 00000001 0200                        b dw 2
    13 00000003 0C000000                    c dd 12
    14 00000007 0400000000000000            d dq 4
    15                                  
    16                                  segment code use32 class=code
    17                                  start:
    18 00000000 A0[00000000]                mov al, [a]
    19 00000005 B400                        mov ah, 0 ;convert byte al to word ax
    20                                      
    21 00000007 668B1D[01000000]            mov bx, [b]
    22 0000000E 6629D8                      sub ax, bx ;ax = a-b
    23                                      
    24 00000011 668B1D[01000000]            mov bx, [b]
    25 00000018 66BA0000                    mov dx, 0 ;dx:bx = b
    26 0000001C 6652                        push dx
    27 0000001E 6653                        push bx
    28 00000020 5B                          pop ebx ;convert word bx to double word ebx
    29                                      
    30 00000021 8B0D[03000000]              mov ecx, [c]
    31 00000027 29D9                        sub ecx, ebx; ecx = c-b
    32 00000029 BA00000000                  mov edx, 0 ;convert double word ecx to quad word edx:ecx
    33                                      
    34 0000002E 2B0D[07000000]              sub ecx, dword [d]
    35 00000034 1B15[0B000000]              sbb edx, dword [d+4] ;edx:ecx = c-b-d
    36                                      
    37 0000003A 66BB0000                    mov bx, 0 ;bx:ax = a-b
    38 0000003E 6653                        push bx
    39 00000040 6650                        push ax
    40 00000042 58                          pop eax ;convert word ax to double word eax
    41                                      
    42 00000043 BB00000000                  mov ebx, 0 ;convert double word eax to quad word ebx:eax
    43 00000048 01C8                        add eax, ecx
    44 0000004A 11D3                        adc ebx, edx ;ebx:eax = (a-b)+(c-b-d)
    45                                      
    46 0000004C 0305[07000000]              add eax, dword [d]
    47 00000052 131D[0B000000]              adc ebx, dword [d+4] ;ebx:eax = (a-b)+(c-b-d)+d
    48                                      
    49                                      ; exit(0)
    50 00000058 6A00                        push dword 0
    51 0000005A FF15[00000000]              call [exit]
